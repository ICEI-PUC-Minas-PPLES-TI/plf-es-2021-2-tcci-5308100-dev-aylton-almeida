// Mocks generated by Mockito 5.0.17 from annotations
// in delivery_manager/test/app/modules/delivery_code/controllers/delivery_code_controller_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i8;

import 'package:flutter/foundation.dart' as _i6;
import 'package:flutter/rendering.dart' as _i2;
import 'package:flutter/services.dart' as _i3;
import 'package:flutter/src/widgets/editable_text.dart' as _i7;
import 'package:flutter/src/widgets/form.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTextSelection_0 extends _i1.Fake implements _i2.TextSelection {}

class _FakeTextEditingValue_1 extends _i1.Fake implements _i3.TextEditingValue {
}

class _FakeTextSpan_2 extends _i1.Fake implements _i2.TextSpan {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeForm_3 extends _i1.Fake implements _i4.Form {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_4 extends _i1.Fake implements _i5.BuildContext {}

class _FakeWidget_5 extends _i1.Fake implements _i5.Widget {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_6 extends _i1.Fake implements _i2.DiagnosticsNode {
  @override
  String toString(
          {_i6.TextTreeConfiguration? parentConfiguration,
          _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [TextEditingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextEditingController extends _i1.Mock
    implements _i7.TextEditingController {
  MockTextEditingController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get text =>
      (super.noSuchMethod(Invocation.getter(#text), returnValue: '') as String);
  @override
  set text(String? newText) =>
      super.noSuchMethod(Invocation.setter(#text, newText),
          returnValueForMissingStub: null);
  @override
  set value(_i3.TextEditingValue? newValue) =>
      super.noSuchMethod(Invocation.setter(#value, newValue),
          returnValueForMissingStub: null);
  @override
  _i2.TextSelection get selection =>
      (super.noSuchMethod(Invocation.getter(#selection),
          returnValue: _FakeTextSelection_0()) as _i2.TextSelection);
  @override
  set selection(_i2.TextSelection? newSelection) =>
      super.noSuchMethod(Invocation.setter(#selection, newSelection),
          returnValueForMissingStub: null);
  @override
  _i3.TextEditingValue get value =>
      (super.noSuchMethod(Invocation.getter(#value),
          returnValue: _FakeTextEditingValue_1()) as _i3.TextEditingValue);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i2.TextSpan buildTextSpan(
          {_i5.BuildContext? context,
          _i2.TextStyle? style,
          bool? withComposing}) =>
      (super.noSuchMethod(
          Invocation.method(#buildTextSpan, [], {
            #context: context,
            #style: style,
            #withComposing: withComposing
          }),
          returnValue: _FakeTextSpan_2()) as _i2.TextSpan);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void clearComposing() =>
      super.noSuchMethod(Invocation.method(#clearComposing, []),
          returnValueForMissingStub: null);
  @override
  bool isSelectionWithinTextBounds(_i2.TextSelection? selection) =>
      (super.noSuchMethod(
          Invocation.method(#isSelectionWithinTextBounds, [selection]),
          returnValue: false) as bool);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalKey<T extends _i5.State<_i5.StatefulWidget>> extends _i1.Mock
    implements _i5.GlobalKey<T> {
  MockGlobalKey() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [FormState].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormState extends _i1.Mock implements _i4.FormState {
  MockFormState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Form get widget => (super.noSuchMethod(Invocation.getter(#widget),
      returnValue: _FakeForm_3()) as _i4.Form);
  @override
  _i5.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_4()) as _i5.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i5.Widget build(_i5.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_5()) as _i5.Widget);
  @override
  void save() => super.noSuchMethod(Invocation.method(#save, []),
      returnValueForMissingStub: null);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
  @override
  bool validate() =>
      (super.noSuchMethod(Invocation.method(#validate, []), returnValue: false)
          as bool);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  void didUpdateWidget(_i4.Form? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i8.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i2.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i2.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i6.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_6()) as _i2.DiagnosticsNode);
}
